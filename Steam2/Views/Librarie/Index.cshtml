@model List<Tuple<Game, Library>>

@{
    ViewData["Title"] = "Index";
}

<h1>Your Library</h1>

<table class="table">
    <thead>
        <tr>
            <!-- Uhhhhhhh, we kinda need theeeee hours played, but idk how with the whole model thing

            Here's how, thanks ChatGPT ( eta signs replaced with X)

            Xmodel Tuple<Model1, Model2>

            <h1>Information from Model1 and Model2</h1>

            <p>Model1 property 1: XHtml.DisplayFor(m => m.Item1.Property1)</p>
            <p>Model2 property 2: XHtml.DisplayFor(m => m.Item2.Property2)</p>

            <h2>List of items from Model1</h2>

            <ul>
            Xforeach (var item in Model.Item1.Items)
            {
                <li>Xitem.Name</li>
            }
            </ul>

            Ok, so this is a kinda bad method, so, in the future, use ViewData probably



            -->
            <th>
                @Html.DisplayNameFor(model => model[0].Item1.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Item2.HoursPlayed)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                    @Html.DisplayFor(modelItem => item.Item1.Title) 
            </td>
            <td>
                    @Html.DisplayFor(modelItem => item.Item2.HoursPlayed)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Item2.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Item2.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Item2.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
